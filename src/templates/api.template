---
template: page.template
--- name:sidebar-after pipeline:erb
    <section>
      <h3>Classes and Modules</h3>

      <input type="text" id="filter_menu" onkeyup="filter()"  placeholder="Search..." title="Filter API classes">
      <script>
        document.getElementById('filter_menu').focus();
        function filter() {
          var filter_value, li, a, i;
          filter_value = document.getElementById('filter_menu').value.toLowerCase();
          li = document.querySelectorAll('.api-menu li')

          for (i = 0; i < li.length; i++) {
            a = li[i].getElementsByTagName("a")[0];
            if (a.innerHTML.toLowerCase().indexOf(filter_value) > -1) {
              a.style.display = "";
            } else {
              a.style.display = "none";
            }
          }
        }
      </script>
      <nav class="api-menu">
        <%= context.tag('menu', 'options' => {alcn: ['/documentation/api/**/*.html', '/documentation/api/HexaPDF/'], not: {alcn: ['/documentation/api/**/index.*.html', '/documentation/api/index.html', '/documentation/api/HexaPDF.html']}}, 'template' => '') %>
      </nav>
    </section>


--- name:tag.menu pipeline:ruby --------------------------------------------------------------------
cache_name = (context.website.cache.volatile[:api_names] ||= {})

nested_list = lambda do |nodes, level|
  out = "<ul>"
  nodes.each do |node, children|
    link_text = (cache_name[node.alcn] ||= node.proxy_node(context.dest_node.lang)['title'].
                                           sub(/^(.*::)/, '<span class="api-class-parent">\1</span>'))
    menu = (children ? nested_list.call(children, level + 1) : '')
    link = context.dest_node.link_to(node, context.content_node.lang, 'link_text' => link_text)
    out << "<li>#{link}"
    out << menu
    out << "</li>"
  end
  out << "</ul>"
  out
end
context.content = nested_list.call(context[:nodes], 1)


--- name:content pipeline:ruby -------------------------------------------------------------------------
rdoc_object = context.node.node_info[:rdoc_object]
if rdoc_object.kind_of?(::RDoc::ClassModule)
  context.content = context.render_block(:name => 'klass', :node => 'current')
else
  context.content = context.render_block(:name => 'page', :node => 'current')
end
--- name:page pipeline:erb
<% page = context.node.node_info[:rdoc_object] %>
<div class="api-documentation api-page">
  <div class="description">
    <%= page.description %>
  </div>
</div>
--- name:klass pipeline:erb
<% klass = context.node.node_info[:rdoc_object] %>
<div class="api-documentation api-<%= klass.type %>">
  <h1 class="<%= klass.type %>"><%= klass.type %> <%= klass.full_name.gsub('::', '::<wbr />') %></h1>

  <% if klass.type == 'class' || !klass.includes.empty? || !klass.extends.empty? then %>
  <table class="class-details">
  <% if klass.type == 'class' then %>
    <tr id="parent-class-section">
    <th>Parent</th>
    <% if klass.superclass and not String === klass.superclass then %>
    <td class="link" data-label="Parent"><a href="<%= klass.aref_to klass.superclass.path %>"><%= klass.superclass.full_name %></a></td>
    <% else %>
    <td class="link" data-label="Parent"><%= klass.superclass %></td>
    <% end %>
    </tr>
  <% end %>
  <% unless klass.extends.empty? then %>
    <tr id="extends-section">
    <th>Extended With</th>
    <td class="link-list" data-label="Extended With">
      <% klass.each_extend do |ext| %>
      <% unless String === ext.module then %>
        <a class="extend" href="<%= klass.aref_to ext.module.path %>"><%= ext.module.full_name %></a><br />
      <% else %>
        <span class="extend"><%= ext.name %></span><br />
      <% end %>
      <% end %>
    </td></tr>
  <% end %>
  <% unless klass.includes.empty? then %>
    <tr id="includes-section">
    <th>Included Modules</th>
    <td class="link-list" data-label="Included Modules">
      <% klass.each_include do |inc| %>
      <% unless String === inc.module then %>
        <a class="include" href="<%= klass.aref_to inc.module.path %>"><%= inc.module.full_name %></a><br />
      <% else %>
        <span class="include"><%= inc.name %></span><br />
      <% end %>
      <% end %>
    </td></tr>
  <% end %>
  </table>
  <% end %>

  <div id="top" class="description">
    <%= klass.description %>
  </div><!-- description -->

  <% klass.each_section do |section, constants, attributes| %>
  <% constants = constants.select { |const| const.display? } %>
  <% attributes = attributes.select { |attr| attr.display? } %>
  <section id="<%= section.aref %>" class="documentation-section">
    <% if section.title then %>
    <div class="documentation-section-title">
      <h2 class="section-header">
        <%= section.title %>
      </h2>
    </div>
    <% end %>

    <% if section.comment then %>
    <div class="description">
      <%= section.description %>
    </div>
    <% end %>

    <% unless constants.empty? then %>
    <!-- Constants -->
    <section id="Constants" class="section">
      <h3 class="section-header">Constants</h3>
      <dl>
      <% constants.each do |const| %>
        <dt id="<%= const.name %>" class="target"><%= const.name %><a class="target-link" href="#<%= const.name %>">¶</a>
        <% if const.comment then %>
        <dd class="description"><%= const.description.strip %>
        <% else %>
        <dd class="description missing-docs">(Not documented)
        <% end %>
      <% end %>
      </dl>
    </section>
    <% end %>

    <% unless attributes.empty? then %>
    <!-- Attributes -->
    <section id="Attributes" class="method-section section">
      <h3 class="section-header">Attributes</h3>

      <% attributes.each do |attrib| %>
      <div id="<%= attrib.aref %>" class="method-detail">
        <div class="method-heading attribute-method-heading target">
          <span class="method-name"><%= h attrib.name %></span><span
            class="attribute-access-type">[<%= attrib.rw %>]</span><a class="target-link" href="#<%= attrib.aref %>">¶</a>
        </div>

        <div class="method-description">
        <% if attrib.comment then %>
        <%= attrib.description.strip %>
        <% else %>
        <p class="missing-docs">(Not documented)
        <% end %>
        </div>
      </div>
      <% end %>
    </section><!-- attribute-method-details -->
    <% end %>

    <!-- Methods -->
    <% klass.methods_by_type(section).each do |type, visibilities|
       next if visibilities.empty? %>
     <section id="<%= type.capitalize %>-Methods">
    <% visibilities.each do |visibility, methods|
         next if methods.empty? %>
     <section id="<%= visibility %>-<%= type %>-<%= section.aref %>-method-details" class="method-section section">
      <h3 class="section-header"><%= visibility.to_s.capitalize %> <%= type.capitalize %> Methods</h3>

    <% methods.each do |method| %>
      <div id="<%= method.aref %>" class="method-detail <%= method.is_alias_for ? "method-alias" : '' %>">
        <% if method.call_seq then %>
        <%   method.call_seq.strip.split("\n").each_with_index do |call_seq, i| %>
        <div class="method-heading target">
          <span class="method-callseq">
            <%= h(call_seq.strip.
                  gsub( /^\w+\./m, '')).
                  gsub(/(.*)[-=]&gt;/, '\1&rarr;') %>
          </span><a class="target-link" href="#<%= method.aref %>">¶</a>
          <% if i == 0 and method.token_stream then %>
          <span class="method-click-advice">click to toggle source</span>
          <% end %>
        </div>
        <%   end %>
        <% else %>
        <div class="method-heading target">
          <span class="method-name"><%= h method.name %></span><span
            class="method-args"><%= method.param_seq %></span><a class="target-link" href="#<%= method.aref %>">¶</a>
          <% if method.token_stream then %>
          <span class="method-click-advice">click to toggle source</span>
          <% end %>
        </div>
        <% end %>

        <div class="method-description">
          <% if method.comment then %>
          <%= method.description.strip %>
          <% else %>
          <p class="missing-docs">(Not documented)
          <% end %>
          <% if method.calls_super then %>
            <div class="method-calls-super">
              Calls superclass method
              <%=
                  method.superclass_method ?
                  method.formatter.link(method.superclass_method.full_name, method.superclass_method.full_name) : nil
              %>
            </div>
          <% end %>

          <% if method.token_stream then %>
          <div class="method-source-code" id="<%= method.html_name %>-source">
            <pre><%= method.markup_code %></pre>
          </div><!-- <%= method.html_name %>-source -->
          <% end %>
        </div>

        <% unless method.aliases.empty? then %>
        <div class="aliases">
          Also aliased as: <%= method.aliases.map do |aka|
            if aka.parent then # HACK lib/rexml/encodings
              %{<a href="#{klass.aref_to aka.path}">#{h aka.name}</a>}
            else
              h aka.name
            end
          end.join ", " %>
        </div>
        <% end %>

        <% if method.is_alias_for then %>
        <div class="aliases">
          Alias for: <a href="<%= klass.aref_to method.is_alias_for.path %>"><%= h method.is_alias_for.name %></a>
        </div>
        <% end %>
      </div><!-- <%= method.html_name %>-method -->

    <% end %>
    </section><!-- <%= visibility %>-<%= type %>-method-details -->
  <% end %>
    </section>
   <%  end %>
  </section><!-- <%= section.aref %> -->
<% end %>

</div><!-- documentation -->
