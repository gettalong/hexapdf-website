---
title: 'How-to: Signing PDFs <span class="icon-compass"></span>'
---

<h1>Signing PDFs</h1>

This how-to guide provides information and code samples for applying digital signatures to PDF
files. It is assumed that you are familiar with digital signatures, if not, have a look at the
[Digital Signatures](index.html) key topic.

All the examples use the demo certificates that are included with the HexaPDF distribution. For real
world usage you have to provide your own signing certificate!


## Applying a Single Signature {#single}

A digital signature can be applied to an existing document or to a new one. The steps for applying
the digital signature are the same and must be done after everything else.

When applying a signature to an existing document, the document itself won't be changed but a new
revision with the signature will be added by default. However, if needed it is also possible to
include the digital signature in the original file by setting the `incremental: false` write option.

In this sample code we are using a local signing certificate and the default signing handler to add
a non-visual signature. Everything needed for a correct signature (AcroForm signature field and
signature object) is automatically created with default values.

~~~ ruby
require 'hexapdf'
require HexaPDF.data_dir + '/cert/demo_cert.rb'

doc = HexaPDF::Document.open(ARGV[0])
doc.sign("signed.pdf", reason: 'Some reason',
                       certificate: HexaPDF.demo_cert.cert,
                       key: HexaPDF.demo_cert.key,
                       certificate_chain: [HexaPDF.demo_cert.sub_ca,
                                           HexaPDF.demo_cert.root_ca])
~~~


## Adding a Visual Appearance {#visual}

If a visual signature is needed, we need to create it before signing the document. It *is* generally
possible to construct the document in a way to modify the visual appearance after signing. However,
this is a bit more involved and the signature might not show correctly in all viewers.

The visual appearance needs to be set on the signature field associated with the signature. This
means we need to create the signature field beforehand and create its appearance stream; and then
pass the field to the signing method.

The following code is nearly the same as the [one for applying a single signature](#single), we just
add the necessary appearance creation.

~~~ ruby
require 'hexapdf'
require HexaPDF.data_dir + '/cert/demo_cert.rb'

doc = HexaPDF::Document.open(ARGV[0])

sig_field = doc.acro_form(create: true).create_signature_field('signature')
widget = sig_field.create_widget(doc.pages[0], Rect: [20, 500, 120, 600])
widget.create_appearance.canvas.
  stroke_color("red").rectangle(1, 1, 99, 99).stroke.
  font("Helvetica", size: 10).
  text("Certified by signer", at: [10, 10])

doc.sign("signed.pdf", signature: sig_field,
                       reason: 'Some reason',
                       certificate: HexaPDF.demo_cert.cert,
                       key: HexaPDF.demo_cert.key,
                       certificate_chain: [HexaPDF.demo_cert.sub_ca,
                                           HexaPDF.demo_cert.root_ca])
~~~


## Applying Multiple Signatures {#multiple}

Applying multiple signatures to a PDF requires performing the same signing steps just multiple
times. And the PDF's permissions set with the first signature must allow such changes so that all
prior signatures stay valid.

Since the document must be written each time a signature is applied, it has to be reloaded for each
additional signature.

The following code signs the input document three times with the same signature. One might also use
existing signature fields for the signatures if necessary.

~~~ ruby
require 'hexapdf'
require 'stringio'
require HexaPDF.data_dir + '/cert/demo_cert.rb'

in_io = StringIO.new(File.binread(ARGV[0]))

3.times do |i|
  doc = HexaPDF::Document.new(io: in_io)
  out_io = StringIO.new(''.b)
  doc.sign(out_io, reason: "Some reason #{i}",
                   certificate: HexaPDF.demo_cert.cert,
                   key: HexaPDF.demo_cert.key,
                   certificate_chain: [HexaPDF.demo_cert.sub_ca,
                                       HexaPDF.demo_cert.root_ca])
  in_io = out_io
end

File.write('signed.pdf', in_io.string)
~~~


## Finalizing a PDF vs Allowing Some Modifications

When applying the first signature it is possible to finalize the PDF so that no or only some
modifications are allowed. This is called creating a certification signature.

It is possible to set the following permissions:

1. No changes.
2. Filling in forms and signing.
3. Filling in forms, signing and annotation creation, deletion and modification.

The following code creates a signed document that allows no modifications:

~~~ ruby
require 'hexapdf'
require HexaPDF.data_dir + '/cert/demo_cert.rb'

doc = HexaPDF::Document.open(ARGV[0])
doc.sign("signed.pdf", doc_mdp_permissions: :no_changes,
                       certificate: HexaPDF.demo_cert.cert,
                       key: HexaPDF.demo_cert.key,
                       certificate_chain: [HexaPDF.demo_cert.sub_ca,
                                           HexaPDF.demo_cert.root_ca])
~~~


## Using an External Mechanism for Signing {#external}

Sometimes the built-in mechanism for signing cannot be used because the certificate and private key
are not readily available. Such situations often arise when a hardware security module (HSM) is used
for signing since it doesn't allow extracting the private key.

In such cases signing itself has to be done by the application using HexaPDF. And since HexaPDF
doesn't know anything about the signature, one also has to tell HexaPDF the signature size so that
enough space is reserved.

The following code uses the demo certificates together with the external signing mechanism to
achieve the same result as one would get when using the standard signing mechanism:

~~~ ruby
require 'hexapdf'
require HexaPDF.data_dir + '/cert/demo_cert.rb'

doc = HexaPDF::Document.open(ARGV[0])
signing_mechanism = lambda do |io, byte_range|
  # Read the bytes to be signed
  io.pos = byte_range[0]
  data = io.read(byte_range[1])
  io.pos = byte_range[2]
  data << io.read(byte_range[3])

  # Create the DER encoded PKCS#7 signed-data structure
  OpenSSL::PKCS7.sign(HexaPDF.demo_cert.cert, HexaPDF.demo_cert.key,
                      data, [HexaPDF.demo_cert.sub_ca, HexaPDF.demo_cert.root_ca],
                      OpenSSL::PKCS7::DETACHED | OpenSSL::PKCS7::BINARY).to_der
end
doc.sign("signed.pdf", signature_size: 10_000, external_signing: signing_mechanism)
~~~


## Asynchronous External Signing {#asynchron}

There are some situations where between the creation of the prepared to-be-signed document and the
creation of the digital signature itself lies some time. This might happen in a web application
where users can sign PDF documents using a client-local mechanism, for example, by using some
citizen ID signature system.

In such cases a variant of the external signing mechanism can be used:

* Pretend to sign the document using the external signing mechanism but really just return an empty
  string. The written document now contains everything but the actual digital signature.

* Create the digital signature based on the information (IO object and byte range array) provided to
  the external signing mechanism.

* Embed the digital signature into the prepared document, getting the final document.

The following code does exactly this:

~~~ ruby
require 'hexapdf'
require HexaPDF.data_dir + '/cert/demo_cert.rb'

doc = HexaPDF::Document.open(ARGV[0])

# Prepare the document for embedding of the digital signature
data = nil # Used for storing the to-be-signed data
signing_mechanism = lambda do |io, byte_range|
  # Store the to-be-signed data in the local variable data
  io.pos = byte_range[0]
  data = io.read(byte_range[1])
  io.pos = byte_range[2]
  data << io.read(byte_range[3])
  ""
end
doc.sign("signed.pdf", signature_size: 10_000, external_signing: signing_mechanism)

# Create the signature
signature = OpenSSL::PKCS7.sign(HexaPDF.demo_cert.cert, HexaPDF.demo_cert.key, data,
                                [HexaPDF.demo_cert.sub_ca, HexaPDF.demo_cert.root_ca],
                                OpenSSL::PKCS7::DETACHED | OpenSSL::PKCS7::BINARY).to_der

# Embed the signature
HexaPDF::Document::Signatures.embed_signature(File.open('signed.pdf', 'rb+'), signature)
~~~


## Adding a Timestamp Signature {#timestamp}

Timestamp signatures are similar to standard signatures in that they use the same signing
infrastructure. The differences lie in some signature dictionary field values and the structure of
the digital signature itself. Therefore it is only necessary to use a special signing handler for
creating timestamp signatures.

It is mandatory to provide at least the URL of the timestamp authority server (TSA), everything else
is optional and uses default values. Note that the server will be contacted twice if you don't
specify the signature size!

The following code use the timestamp service from <https://freeTSA.org> to add a timestamp to a PDF
document:

~~~ ruby
require 'hexapdf'

doc = HexaPDF::Document.open(ARGV[0])
doc.sign("signed.pdf", handler: :timestamp, reason: 'Some reason',
                       tsa_url: 'https://freetsa.org/tsr')
~~~
